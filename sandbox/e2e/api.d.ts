/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/tests": {
    /** Create a new test */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Test"];
        };
      };
      responses: {
        /** @description Test created */
        201: {
          content: never;
        };
      };
    };
  };
  "/tests/{testId}": {
    /** Get a specific test */
    get: {
      parameters: {
        path: {
          testId: string;
        };
      };
      responses: {
        /** @description Details of a test */
        200: {
          content: {
            "application/json": components["schemas"]["Test"];
          };
        };
      };
    };
    /** Update an existing test */
    put: {
      parameters: {
        path: {
          testId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Test"];
        };
      };
      responses: {
        /** @description Test updated */
        200: {
          content: never;
        };
      };
    };
    /** Delete a test */
    delete: {
      parameters: {
        path: {
          testId: string;
        };
      };
      responses: {
        /** @description Test deleted */
        204: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        testId: string;
      };
    };
  };
  "/tests/{testId}/execute": {
    /** Execute a specific test */
    post: {
      parameters: {
        path: {
          testId: string;
        };
      };
      responses: {
        /** @description Test execution started */
        202: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        testId: string;
      };
    };
  };
  "/tests/{testId}/history": {
    /** Get the history of a specific test */
    get: {
      parameters: {
        path: {
          testId: string;
        };
      };
      responses: {
        /** @description History of the specified test */
        200: {
          content: {
            "application/json": components["schemas"]["TestResult"][];
          };
        };
      };
    };
    parameters: {
      path: {
        testId: string;
      };
    };
  };
  "/tests/{testId}/runs": {
    /** Get the runs of a specific test */
    get: {
      parameters: {
        path: {
          testId: string;
        };
      };
      responses: {
        /** @description Runs of the specified test */
        200: {
          content: {
            "application/json": components["schemas"]["TestRun"][];
          };
        };
      };
    };
    parameters: {
      path: {
        testId: string;
      };
    };
  };
  "/runs": {
    /** Get all runs */
    get: {
      responses: {
        /** @description All runs */
        200: {
          content: {
            "application/json": components["schemas"]["TestRun"][];
          };
        };
      };
    };
  };
  "/runs/{runId}/status": {
    /** Get the status of a specific run */
    get: {
      parameters: {
        path: {
          runId: string;
        };
      };
      responses: {
        /** @description Status of the specified run */
        200: {
          content: {
            "application/json": components["schemas"]["RunStatus"];
          };
        };
      };
    };
    parameters: {
      path: {
        runId: string;
      };
    };
  };
  "/runs/{runId}/cancel": {
    /** Cancel a specific run */
    post: {
      parameters: {
        path: {
          runId: string;
        };
      };
      responses: {
        /** @description Run cancelled */
        200: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        runId: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Test: {
      id?: string;
      name?: string;
      script?: string;
    };
    TestResult: {
      testId?: string;
      executionId?: string;
      status?: string;
      startTime?: string;
      endTime?: string;
      result?: string;
    };
    TestRun: {
      runId?: string;
      testId?: string;
      status?: string;
      startTime?: string;
      endTime?: string;
    };
    RunStatus: {
      runId?: string;
      status?: string;
      startTime?: string;
      endTime?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
